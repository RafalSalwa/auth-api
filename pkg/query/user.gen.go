// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/RafalSalwa/auth-api/pkg/models"
)

func newUserDBModel(db *gorm.DB, opts ...gen.DOOption) userDBModel {
	_userDBModel := userDBModel{}

	_userDBModel.userDBModelDo.UseDB(db, opts...)
	_userDBModel.userDBModelDo.UseModel(&models.UserDBModel{})

	tableName := _userDBModel.userDBModelDo.TableName()
	_userDBModel.ALL = field.NewAsterisk(tableName)
	_userDBModel.Id = field.NewInt64(tableName, "id")
	_userDBModel.Username = field.NewString(tableName, "username")
	_userDBModel.Password = field.NewString(tableName, "password")
	_userDBModel.Firstname = field.NewString(tableName, "first_name")
	_userDBModel.Lastname = field.NewString(tableName, "last_name")
	_userDBModel.Email = field.NewString(tableName, "email")
	_userDBModel.Phone = field.NewString(tableName, "phone_no")
	_userDBModel.Roles = field.NewBytes(tableName, "roles")
	_userDBModel.VerificationCode = field.NewString(tableName, "verification_code")
	_userDBModel.Verified = field.NewBool(tableName, "is_verified")
	_userDBModel.Active = field.NewBool(tableName, "is_active")
	_userDBModel.CreatedAt = field.NewTime(tableName, "created_at")
	_userDBModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userDBModel.LastLogin = field.NewTime(tableName, "last_login")
	_userDBModel.DeletedAt = field.NewTime(tableName, "deleted_at")

	_userDBModel.fillFieldMap()

	return _userDBModel
}

type userDBModel struct {
	userDBModelDo

	ALL              field.Asterisk
	Id               field.Int64
	Username         field.String
	Password         field.String
	Firstname        field.String
	Lastname         field.String
	Email            field.String
	Phone            field.String
	Roles            field.Bytes
	VerificationCode field.String
	Verified         field.Bool
	Active           field.Bool
	CreatedAt        field.Time
	UpdatedAt        field.Time
	LastLogin        field.Time
	DeletedAt        field.Time

	fieldMap map[string]field.Expr
}

func (u userDBModel) Table(newTableName string) *userDBModel {
	u.userDBModelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDBModel) As(alias string) *userDBModel {
	u.userDBModelDo.DO = *(u.userDBModelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDBModel) updateTableName(table string) *userDBModel {
	u.ALL = field.NewAsterisk(table)
	u.Id = field.NewInt64(table, "id")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")
	u.Firstname = field.NewString(table, "first_name")
	u.Lastname = field.NewString(table, "last_name")
	u.Email = field.NewString(table, "email")
	u.Phone = field.NewString(table, "phone_no")
	u.Roles = field.NewBytes(table, "roles")
	u.VerificationCode = field.NewString(table, "verification_code")
	u.Verified = field.NewBool(table, "is_verified")
	u.Active = field.NewBool(table, "is_active")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.LastLogin = field.NewTime(table, "last_login")
	u.DeletedAt = field.NewTime(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userDBModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDBModel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 15)
	u.fieldMap["id"] = u.Id
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
	u.fieldMap["first_name"] = u.Firstname
	u.fieldMap["last_name"] = u.Lastname
	u.fieldMap["email"] = u.Email
	u.fieldMap["phone_no"] = u.Phone
	u.fieldMap["roles"] = u.Roles
	u.fieldMap["verification_code"] = u.VerificationCode
	u.fieldMap["is_verified"] = u.Verified
	u.fieldMap["is_active"] = u.Active
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["last_login"] = u.LastLogin
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userDBModel) clone(db *gorm.DB) userDBModel {
	u.userDBModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDBModel) replaceDB(db *gorm.DB) userDBModel {
	u.userDBModelDo.ReplaceDB(db)
	return u
}

type userDBModelDo struct{ gen.DO }

type IUserDBModelDo interface {
	gen.SubQuery
	Debug() IUserDBModelDo
	WithContext(ctx context.Context) IUserDBModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDBModelDo
	WriteDB() IUserDBModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDBModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDBModelDo
	Not(conds ...gen.Condition) IUserDBModelDo
	Or(conds ...gen.Condition) IUserDBModelDo
	Select(conds ...field.Expr) IUserDBModelDo
	Where(conds ...gen.Condition) IUserDBModelDo
	Order(conds ...field.Expr) IUserDBModelDo
	Distinct(cols ...field.Expr) IUserDBModelDo
	Omit(cols ...field.Expr) IUserDBModelDo
	Join(table schema.Tabler, on ...field.Expr) IUserDBModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDBModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDBModelDo
	Group(cols ...field.Expr) IUserDBModelDo
	Having(conds ...gen.Condition) IUserDBModelDo
	Limit(limit int) IUserDBModelDo
	Offset(offset int) IUserDBModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDBModelDo
	Unscoped() IUserDBModelDo
	Create(values ...*models.UserDBModel) error
	CreateInBatches(values []*models.UserDBModel, batchSize int) error
	Save(values ...*models.UserDBModel) error
	First() (*models.UserDBModel, error)
	Take() (*models.UserDBModel, error)
	Last() (*models.UserDBModel, error)
	Find() ([]*models.UserDBModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserDBModel, err error)
	FindInBatches(result *[]*models.UserDBModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserDBModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDBModelDo
	Assign(attrs ...field.AssignExpr) IUserDBModelDo
	Joins(fields ...field.RelationField) IUserDBModelDo
	Preload(fields ...field.RelationField) IUserDBModelDo
	FirstOrInit() (*models.UserDBModel, error)
	FirstOrCreate() (*models.UserDBModel, error)
	FindByPage(offset int, limit int) (result []*models.UserDBModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDBModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithUsernameOrEmail(username string, email string) (result *models.UserDBModel, err error)
}

// SELECT id,username FROM @@table WHERE (is_active=1 AND is_verified=1 AND deleted_at IS NULL) AND (username = @username OR email = @email) LIMIT 1{{end}}
func (u userDBModelDo) FilterWithUsernameOrEmail(username string, email string) (result *models.UserDBModel, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, username)
	params = append(params, email)
	generateSQL.WriteString("SELECT id,username FROM user WHERE (is_active=1 AND is_verified=1 AND deleted_at IS NULL) AND (username = ? OR email = ?) LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userDBModelDo) Debug() IUserDBModelDo {
	return u.withDO(u.DO.Debug())
}

func (u userDBModelDo) WithContext(ctx context.Context) IUserDBModelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDBModelDo) ReadDB() IUserDBModelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDBModelDo) WriteDB() IUserDBModelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDBModelDo) Session(config *gorm.Session) IUserDBModelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDBModelDo) Clauses(conds ...clause.Expression) IUserDBModelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDBModelDo) Returning(value interface{}, columns ...string) IUserDBModelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDBModelDo) Not(conds ...gen.Condition) IUserDBModelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDBModelDo) Or(conds ...gen.Condition) IUserDBModelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDBModelDo) Select(conds ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDBModelDo) Where(conds ...gen.Condition) IUserDBModelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDBModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserDBModelDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userDBModelDo) Order(conds ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDBModelDo) Distinct(cols ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDBModelDo) Omit(cols ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDBModelDo) Join(table schema.Tabler, on ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDBModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDBModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDBModelDo) Group(cols ...field.Expr) IUserDBModelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDBModelDo) Having(conds ...gen.Condition) IUserDBModelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDBModelDo) Limit(limit int) IUserDBModelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDBModelDo) Offset(offset int) IUserDBModelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDBModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDBModelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDBModelDo) Unscoped() IUserDBModelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDBModelDo) Create(values ...*models.UserDBModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDBModelDo) CreateInBatches(values []*models.UserDBModel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDBModelDo) Save(values ...*models.UserDBModel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDBModelDo) First() (*models.UserDBModel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserDBModel), nil
	}
}

func (u userDBModelDo) Take() (*models.UserDBModel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserDBModel), nil
	}
}

func (u userDBModelDo) Last() (*models.UserDBModel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserDBModel), nil
	}
}

func (u userDBModelDo) Find() ([]*models.UserDBModel, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserDBModel), err
}

func (u userDBModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserDBModel, err error) {
	buf := make([]*models.UserDBModel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDBModelDo) FindInBatches(result *[]*models.UserDBModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDBModelDo) Attrs(attrs ...field.AssignExpr) IUserDBModelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDBModelDo) Assign(attrs ...field.AssignExpr) IUserDBModelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDBModelDo) Joins(fields ...field.RelationField) IUserDBModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDBModelDo) Preload(fields ...field.RelationField) IUserDBModelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDBModelDo) FirstOrInit() (*models.UserDBModel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserDBModel), nil
	}
}

func (u userDBModelDo) FirstOrCreate() (*models.UserDBModel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserDBModel), nil
	}
}

func (u userDBModelDo) FindByPage(offset int, limit int) (result []*models.UserDBModel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDBModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDBModelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDBModelDo) Delete(models ...*models.UserDBModel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDBModelDo) withDO(do gen.Dao) *userDBModelDo {
	u.DO = *do.(*gen.DO)
	return u
}
