version: '3.9'
services:
  gateway:
    container_name: gateway
    build:
      context: ./
      dockerfile: ./.docker/api_gateway/Dockerfile
    ports:
      - "8011:8011"
      - "8012:8012"
    volumes:
      - ./:/interview
      - ./build/keys/server.crt:/etc/ssl/certs/server.crt
      - ./build/keys/server.key:/etc/ssl/private/server.key
    depends_on:
      - jaeger
      - prometheus
    networks:
      interview-net:
        aliases:
          - igateway
  reader_app:
    container_name: reader_app
    build:
      context: ./
      dockerfile: ./.docker/reader_app/Dockerfile
    env_file: .env
    ports:
      - "8021:8021"
      - "8022:8022"
    volumes:
      - ./:/interview
      - ./build/keys/server.crt:/etc/ssl/certs/server.crt
      - ./build/keys/server.key:/etc/ssl/private/server.key
    networks:
      interview-net:
        aliases:
          - ireader_app
#  writer_app:
#    container_name: writer_app
#    build: .
#    env_file: .env
#    ports:
#      - "8020:8020"
#      - "8021:8021"
#    volumes:
#      - ./:/interview
#      - ./build/keys/server.crt:/etc/ssl/certs/server.crt
#      - ./build/keys/server.key:/etc/ssl/private/server.key
#    #    security_opt:
#    #      - seccomp:unconfined
#    depends_on:
#      mysql:
#        condition: service_healthy
#      postgres:
#        condition: service_healthy
#    networks:
#      interview-net:
#        aliases:
#          - iwriter_app
  mysql:
    container_name: mysql
    image: mysql
    volumes:
      - ./build/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      MYSQL_DATABASE: "interview"
      MYSQL_USER: "interview"
      MYSQL_PASSWORD: "interview"
      MYSQL_ROOT_PASSWORD: "interview"
      MYSQL_TCP_PORT: 6033
    ports:
      - "6033:6033"
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55
    networks:
      interview-net:
        aliases:
          - imysql
  postgres:
    container_name: postgres
    image: postgres
    user: postgres
    volumes:
      - pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'interview'
      POSTGRES_PASSWORD: 'interview'
      POSTGRES_DB: 'interview'
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -U interview -d interview" ]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55
    networks:
      interview-net:
        aliases:
          - ipostgres

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=interview
      - RABBITMQ_DEFAULT_PASS=interview
      - RABBITMQ_DEFAULT_VHOST=interview
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      interview-net:
        aliases:
          - irabbitmq
          
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./.docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      interview-net:
        aliases:
          - iprometheus
    
  jaeger:
    image: jaegertracing/all-in-one:1.46
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "5778:5778"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "9411:9411"
      - "14250:14250"
      - "14268:14268"
      - "16686:16686"
    networks:
      interview-net:
        aliases:
          - ijaeger
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: interview
      MONGO_INITDB_ROOT_PASSWORD: interview
    networks:
      interview-net:
        aliases:
          - imongo

  cache:
    container_name: cache
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - cache:/data
    networks:
      interview-net:
        aliases:
          - icache

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025" # smtp server
      - "8025:8025" # web ui
    networks:
      interview-net:
        aliases:
          - imailhog
volumes:
  cache:
    driver: local
  pg-data:

networks:
  interview-net:
    name: interview-net
    driver: bridge
    enable_ipv6: false
